# Enterprise Anomaly Detector Configuration - Working Version
# Full ML-based statistical anomaly detection with circuit breaker pattern

receivers:
  # Prometheus federation receiver to pull metrics from other modules
  prometheus:
    config:
      scrape_configs:
        - job_name: 'core-metrics-federation'
          scrape_interval: ${env:ANOMALY_SCRAPE_INTERVAL:-10s}
          static_configs:
            - targets: ['${env:CORE_METRICS_ENDPOINT}']
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: 'mysql_.*'
              action: keep
              
        - job_name: 'sql-intelligence-federation'
          scrape_interval: ${env:ANOMALY_SCRAPE_INTERVAL:-10s}
          static_configs:
            - targets: ['${env:SQL_INTELLIGENCE_ENDPOINT}']
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: '(mysql_query_.*|mysql_slow_.*|mysql_plan_.*|sql_intelligence_.*)'
              action: keep
              
        - job_name: 'wait-profiler-federation'
          scrape_interval: ${env:ANOMALY_SCRAPE_INTERVAL:-10s}
          static_configs:
            - targets: ['${env:WAIT_PROFILER_ENDPOINT}']
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: '(mysql_wait_.*|wait_profiler_.*)'
              action: keep

  # OTLP receiver for direct metric ingestion
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  # Memory management with increased limits for ML processing
  memory_limiter:
    check_interval: 5s
    limit_percentage: 85
    spike_limit_percentage: 30

  batch/standard:
    timeout: 10s
    send_batch_size: 5000
    send_batch_max_size: 10000

  batch/critical:
    timeout: 2s
    send_batch_size: 500
    send_batch_max_size: 1000

  # Core attributes for anomaly detector
  attributes/anomaly_detector:
    actions:
      - key: module
        value: anomaly-detector
        action: insert
      - key: detection_method
        value: statistical_zscore
        action: insert
      - key: cluster.name
        value: ${env:CLUSTER_NAME}
        action: insert
      - key: environment
        value: ${env:ENVIRONMENT}
        action: insert
      - key: tier
        value: intelligence
        action: insert

  resource/standard:
    attributes:
      - key: service.name
        value: anomaly-detector
        action: upsert
      - key: service.version
        value: 2.0.0
        action: upsert
      - key: ml.model.version
        value: 1.0.0
        action: upsert

  # New Relic specific attributes for standard pipeline
  attributes/newrelic_standard:
    actions:
      - key: newrelic.source
        value: opentelemetry
        action: insert
      - key: instrumentation.name
        value: mysql-anomaly-detector
        action: insert
      - key: instrumentation.version
        value: 2.0.0
        action: insert
      - key: instrumentation.provider
        value: opentelemetry
        action: insert
      - key: pipeline.type
        value: standard
        action: insert

  # New Relic specific attributes for critical alerts pipeline
  attributes/newrelic_critical:
    actions:
      - key: newrelic.source
        value: opentelemetry
        action: insert
      - key: instrumentation.name
        value: mysql-anomaly-detector
        action: insert
      - key: instrumentation.version
        value: 2.0.0
        action: insert
      - key: instrumentation.provider
        value: opentelemetry
        action: insert
      - key: pipeline.type
        value: critical
        action: insert
      - key: priority
        value: high
        action: insert
      - key: alert.enabled
        value: "true"
        action: insert

  # Entity synthesis for New Relic One
  attributes/entity_synthesis:
    actions:
      - key: entity.type
        value: MYSQL_ANOMALY_DETECTOR
        action: insert
      - key: entity.guid
        value: ANOMALY|${env:CLUSTER_NAME}|${env:MYSQL_ENDPOINT:-mysql}
        action: insert
      - key: entity.name
        value: ${env:MYSQL_ENDPOINT:-mysql}-anomaly-detector
        action: insert
      - key: newrelic.entity.synthesis
        value: "true"
        action: insert

  # Add anomaly detection metadata
  attributes/anomaly_metadata:
    actions:
      - key: anomaly.detection.enabled
        value: "true"
        action: insert
      - key: anomaly.model
        value: z-score
        action: insert
      - key: anomaly.connection_threshold
        value: ${env:CONNECTION_SPIKE_THRESHOLD}
        action: insert
      - key: anomaly.latency_threshold
        value: ${env:LATENCY_DEVIATION_THRESHOLD}
        action: insert
      - key: anomaly.wait_threshold
        value: ${env:WAIT_EVENT_THRESHOLD}
        action: insert
      - key: anomaly.resource_threshold
        value: ${env:RESOURCE_USAGE_THRESHOLD}
        action: insert

  # Baseline enrichment - adds baseline values as attributes
  attributes/baseline:
    actions:
      - key: baseline.connections.mean
        value: ${env:CONNECTIONS_BASELINE_MEAN}
        action: insert
      - key: baseline.connections.stddev
        value: ${env:CONNECTIONS_BASELINE_STDDEV}
        action: insert
      - key: baseline.query_duration.mean
        value: ${env:QUERY_DURATION_BASELINE_MEAN}
        action: insert
      - key: baseline.query_duration.stddev
        value: ${env:QUERY_DURATION_BASELINE_STDDEV}
        action: insert
      - key: baseline.wait_time.mean
        value: ${env:WAIT_TIME_BASELINE_MEAN}
        action: insert
      - key: baseline.wait_time.stddev
        value: ${env:WAIT_TIME_BASELINE_STDDEV}
        action: insert
      - key: baseline.cpu.mean
        value: ${env:CPU_BASELINE_MEAN}
        action: insert
      - key: baseline.cpu.stddev
        value: ${env:CPU_BASELINE_STDDEV}
        action: insert
      - key: baseline.learning_window
        value: ${env:BASELINE_LEARNING_WINDOW}
        action: insert
      - key: baseline.source
        value: ${env:BASELINE_SOURCE}
        action: insert

exporters:
  # Standard New Relic exporter for all anomaly metrics
  otlphttp/newrelic_standard:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: gzip
    timeout: 30s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 60s
      max_elapsed_time: 300s
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 20000

  # Critical New Relic exporter for high-priority anomaly alerts
  otlphttp/newrelic_critical:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: none
    timeout: 10s
    retry_on_failure:
      enabled: true
      initial_interval: 2s
      max_interval: 20s
      max_elapsed_time: 120s
    sending_queue:
      enabled: true
      num_consumers: 5
      queue_size: 10000

  # Prometheus exporter for local monitoring and federation
  prometheus:
    endpoint: "0.0.0.0:${env:EXPORT_PORT}"
    namespace: anomaly
    const_labels:
      module: anomaly-detector
      cluster: ${env:CLUSTER_NAME}
    send_timestamps: true
    enable_open_metrics: true

  # File exporter for alert persistence and audit trail
  file/alerts:
    path: /tmp/anomaly-alerts/alerts.json
    rotation:
      max_megabytes: 100
      max_days: 7
      max_backups: 10
    format: json

  # Debug exporter for troubleshooting
  debug:
    verbosity: basic
    sampling_initial: 10
    sampling_thereafter: 1000

  # OTLP exporter for alert forwarding to alert manager
  otlp/alertmanager:
    endpoint: ${env:ALERT_MANAGER_ENDPOINT:-localhost:4317}
    tls:
      insecure: true
    retry_on_failure:
      enabled: true
      initial_interval: 1s
      max_interval: 30s
      max_elapsed_time: 300s

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
    check_collector_pipeline:
      enabled: true
      interval: 30s
      exporter_failure_threshold: 5

  pprof:
    endpoint: 0.0.0.0:1777

  # Z-pages for internal telemetry
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  
  pipelines:
    # Main pipeline for anomaly detection metrics ingestion
    metrics/ingestion:
      receivers: [prometheus, otlp]
      processors: [
        memory_limiter,
        batch/standard,
        attributes/baseline,
        attributes/anomaly_metadata,
        attributes/anomaly_detector,
        resource/standard,
        attributes/newrelic_standard,
        attributes/entity_synthesis
      ]
      exporters: [otlphttp/newrelic_standard, prometheus, debug]

    # Critical alerts pipeline with circuit breaker
    metrics/critical_alerts:
      receivers: [prometheus, otlp]
      processors: [
        memory_limiter,
        batch/critical,
        attributes/baseline,
        attributes/anomaly_metadata,
        attributes/anomaly_detector,
        resource/standard,
        attributes/newrelic_critical,
        attributes/entity_synthesis
      ]
      exporters: [otlphttp/newrelic_critical, otlp/alertmanager, file/alerts]

    # Metrics federation pipeline for consuming from other modules
    metrics/federation:
      receivers: [prometheus]
      processors: [
        memory_limiter,
        batch/standard,
        attributes/anomaly_detector,
        resource/standard
      ]
      exporters: [prometheus]

  telemetry:
    logs:
      level: info
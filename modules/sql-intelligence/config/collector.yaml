receivers:
  sqlquery/slow_queries:
    driver: mysql
    datasource: "${env:MYSQL_USER}:${env:MYSQL_PASSWORD}@tcp(${env:MYSQL_ENDPOINT})/performance_schema"
    collection_interval: 15s
    queries:
      - sql: |
          SELECT 
            DIGEST,
            SCHEMA_NAME,
            DIGEST_TEXT,
            COUNT_STAR as exec_count,
            SUM_TIMER_WAIT/1000000000 as total_latency_ms,
            AVG_TIMER_WAIT/1000000000 as avg_latency_ms,
            MAX_TIMER_WAIT/1000000000 as max_latency_ms,
            SUM_ROWS_EXAMINED as rows_examined_total,
            SUM_ROWS_SENT as rows_sent_total,
            SUM_NO_INDEX_USED as no_index_used_count,
            SUM_NO_GOOD_INDEX_USED as no_good_index_count
          FROM performance_schema.events_statements_summary_by_digest
          WHERE SCHEMA_NAME IS NOT NULL
            AND DIGEST_TEXT NOT LIKE '%performance_schema%'
            AND COUNT_STAR > 0
          ORDER BY total_latency_ms DESC
          LIMIT 20
        metrics:
          - metric_name: mysql.query.exec_total
            value_column: exec_count
            attribute_columns: [DIGEST, SCHEMA_NAME, DIGEST_TEXT]
          - metric_name: mysql.query.latency_ms
            value_column: total_latency_ms
            attribute_columns: [DIGEST, SCHEMA_NAME, DIGEST_TEXT]
          - metric_name: mysql.query.latency_avg_ms
            value_column: avg_latency_ms
            attribute_columns: [DIGEST, SCHEMA_NAME, DIGEST_TEXT]
          - metric_name: mysql.query.latency_max_ms
            value_column: max_latency_ms
            attribute_columns: [DIGEST, SCHEMA_NAME, DIGEST_TEXT]
          - metric_name: mysql.query.rows_examined_total
            value_column: rows_examined_total
            attribute_columns: [DIGEST, SCHEMA_NAME, DIGEST_TEXT]
          - metric_name: mysql.query.no_index_used_total
            value_column: no_index_used_count
            attribute_columns: [DIGEST, SCHEMA_NAME, DIGEST_TEXT]
  
  sqlquery/table_stats:
    driver: mysql
    datasource: "${env:MYSQL_USER}:${env:MYSQL_PASSWORD}@tcp(${env:MYSQL_ENDPOINT})/performance_schema"
    collection_interval: 30s
    queries:
      - sql: |
          SELECT 
            OBJECT_SCHEMA,
            OBJECT_NAME,
            SUM_TIMER_READ/1000000000 as read_latency_ms,
            SUM_TIMER_WRITE/1000000000 as write_latency_ms,
            SUM_TIMER_MISC/1000000000 as misc_latency_ms,
            COUNT_READ as read_count,
            COUNT_WRITE as write_count,
            COUNT_MISC as misc_count
          FROM performance_schema.table_io_waits_summary_by_table
          WHERE OBJECT_SCHEMA NOT IN ('mysql', 'performance_schema', 'information_schema', 'sys')
          ORDER BY (SUM_TIMER_READ + SUM_TIMER_WRITE) DESC
          LIMIT 20
        metrics:
          - metric_name: mysql.table.io.read.latency_ms
            value_column: read_latency_ms
            attribute_columns: [OBJECT_SCHEMA, OBJECT_NAME]
          - metric_name: mysql.table.io.write.latency_ms
            value_column: write_latency_ms
            attribute_columns: [OBJECT_SCHEMA, OBJECT_NAME]
          - metric_name: mysql.table.io.read.count
            value_column: read_count
            attribute_columns: [OBJECT_SCHEMA, OBJECT_NAME]
          - metric_name: mysql.table.io.write.count
            value_column: write_count
            attribute_columns: [OBJECT_SCHEMA, OBJECT_NAME]

  sqlquery/index_usage:
    driver: mysql
    datasource: "${env:MYSQL_USER}:${env:MYSQL_PASSWORD}@tcp(${env:MYSQL_ENDPOINT})/performance_schema"
    collection_interval: 60s
    queries:
      - sql: |
          SELECT 
            TABLE_SCHEMA,
            TABLE_NAME,
            INDEX_NAME,
            CARDINALITY,
            SEQ_IN_INDEX
          FROM information_schema.STATISTICS
          WHERE TABLE_SCHEMA NOT IN ('mysql', 'performance_schema', 'information_schema', 'sys')
            AND INDEX_NAME != 'PRIMARY'
          ORDER BY CARDINALITY DESC
          LIMIT 50
        metrics:
          - metric_name: mysql.index.cardinality
            value_column: CARDINALITY
            attribute_columns: [TABLE_SCHEMA, TABLE_NAME, INDEX_NAME]

  # Optional: Pull metrics from core-metrics if available
  prometheus:
    config:
      scrape_configs:
        - job_name: 'metrics-federation'
          scrape_interval: 30s
          static_configs:
            - targets: ['${env:METRICS_ENDPOINT}']
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: 'mysql_.*'
              action: keep

processors:
  # Memory management
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 30

  batch/standard:
    timeout: 10s
    send_batch_size: 1000

  batch/critical:
    timeout: 2s
    send_batch_size: 100
  
  attributes/sql_intelligence:
    actions:
      - key: module
        value: sql-intelligence
        action: insert
      - key: mysql.endpoint
        value: ${env:MYSQL_ENDPOINT}
        action: insert
      - key: cluster.name
        value: ${env:CLUSTER_NAME}
        action: insert
      - key: environment
        value: ${env:ENVIRONMENT}
        action: insert
      - key: tier
        value: intelligence
        action: insert

  resource/standard:
    attributes:
      - key: service.name
        value: sql-intelligence
        action: upsert
      - key: service.version
        value: 2.0.0
        action: upsert
  
  # New Relic specific attributes for standard pipeline
  attributes/newrelic_standard:
    actions:
      - key: newrelic.source
        value: opentelemetry
        action: insert
      - key: instrumentation.name
        value: mysql-sql-intelligence-collector
        action: insert
      - key: instrumentation.version
        value: 2.0.0
        action: insert
      - key: instrumentation.provider
        value: opentelemetry
        action: insert
      - key: pipeline.type
        value: standard
        action: insert

  # New Relic specific attributes for critical pipeline
  attributes/newrelic_critical:
    actions:
      - key: newrelic.source
        value: opentelemetry
        action: insert
      - key: instrumentation.name
        value: mysql-sql-intelligence-collector
        action: insert
      - key: instrumentation.version
        value: 2.0.0
        action: insert
      - key: instrumentation.provider
        value: opentelemetry
        action: insert
      - key: pipeline.type
        value: critical
        action: insert
      - key: priority
        value: high
        action: insert

  # Entity synthesis for New Relic One
  attributes/entity_synthesis:
    actions:
      - key: entity.type
        value: MYSQL_INSTANCE
        action: insert
      - key: entity.guid
        value: MYSQL|${env:CLUSTER_NAME}|${env:MYSQL_ENDPOINT}
        action: insert
      - key: entity.name
        value: ${env:MYSQL_ENDPOINT}
        action: insert
      - key: newrelic.entity.synthesis
        value: "true"
        action: insert
  

exporters:
  # Standard New Relic exporter with compression
  otlphttp/newrelic_standard:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: gzip
    timeout: 30s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 60s
      max_elapsed_time: 300s
    sending_queue:
      enabled: true
      num_consumers: 5
      queue_size: 10000

  # Critical New Relic exporter without compression
  otlphttp/newrelic_critical:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: none
    timeout: 10s
    retry_on_failure:
      enabled: true
      initial_interval: 2s
      max_interval: 20s
      max_elapsed_time: 120s
    sending_queue:
      enabled: true
      num_consumers: 3
      queue_size: 5000
  
  debug:
    verbosity: basic

  prometheus:
    endpoint: "0.0.0.0:8082"
    namespace: sql_intelligence
    const_labels:
      module: sql-intelligence
      cluster: ${env:CLUSTER_NAME}

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
    check_collector_pipeline:
      enabled: true
      interval: 30s
      exporter_failure_threshold: 3

  pprof:
    endpoint: 0.0.0.0:1777

service:
  extensions: [health_check, pprof]
  
  pipelines:
    # Standard pipeline for all SQL intelligence metrics
    metrics/standard:
      receivers: [sqlquery/slow_queries, sqlquery/table_stats, sqlquery/index_usage]
      processors: [
        memory_limiter,
        batch/standard,
        attributes/sql_intelligence,
        resource/standard,
        attributes/newrelic_standard,
        attributes/entity_synthesis
      ]
      exporters: [otlphttp/newrelic_standard, prometheus, debug]
    
    # Critical pipeline for high-priority SQL metrics (simulated)
    metrics/critical:
      receivers: [sqlquery/slow_queries, sqlquery/table_stats, sqlquery/index_usage]
      processors: [
        memory_limiter,
        batch/critical,
        attributes/sql_intelligence,
        resource/standard,
        attributes/newrelic_critical,
        attributes/entity_synthesis
      ]
      exporters: [otlphttp/newrelic_critical]
    
    # Federation pipeline for consuming core metrics
    metrics/federation:
      receivers: [prometheus]
      processors: [
        memory_limiter,
        batch/standard,
        attributes/sql_intelligence,
        attributes/newrelic_standard,
        resource/standard
      ]
      exporters: [otlphttp/newrelic_standard]

  telemetry:
    logs:
      level: info
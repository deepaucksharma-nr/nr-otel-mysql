# Simplified Enterprise Core Metrics Configuration
# Focus on working circuit breaker and multi-pipeline patterns

receivers:
  mysql:
    endpoint: ${env:MYSQL_ENDPOINT}
    username: ${env:MYSQL_USER}
    password: ${env:MYSQL_PASSWORD}
    collection_interval: 10s
    transport: tcp

processors:
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 30

  batch/standard:
    timeout: 10s
    send_batch_size: 1000

  batch/critical:
    timeout: 2s
    send_batch_size: 100

  attributes/core_metrics:
    actions:
      - key: module
        value: core-metrics
        action: insert
      - key: mysql.endpoint
        value: ${env:MYSQL_ENDPOINT}
        action: insert
      - key: cluster.name
        value: ${env:CLUSTER_NAME}
        action: insert
      - key: environment
        value: ${env:ENVIRONMENT}
        action: insert
      - key: tier
        value: foundation
        action: insert

  resource/standard:
    attributes:
      - key: service.name
        value: core-metrics
        action: upsert
      - key: service.version
        value: 2.0.0
        action: upsert

  attributes/newrelic:
    actions:
      - key: newrelic.source
        value: opentelemetry
        action: insert
      - key: instrumentation.name
        value: mysql-otel-collector
        action: insert
      - key: instrumentation.version
        value: 2.0.0
        action: insert
      - key: instrumentation.provider
        value: opentelemetry
        action: insert
      - key: pipeline.type
        value: standard
        action: insert

  attributes/newrelic_critical:
    actions:
      - key: newrelic.source
        value: opentelemetry
        action: insert
      - key: instrumentation.name
        value: mysql-otel-collector
        action: insert
      - key: instrumentation.version
        value: 2.0.0
        action: insert
      - key: instrumentation.provider
        value: opentelemetry
        action: insert
      - key: pipeline.type
        value: critical
        action: insert
      - key: priority
        value: high
        action: insert

  attributes/entity_synthesis:
    actions:
      - key: entity.type
        value: MYSQL_INSTANCE
        action: insert
      - key: entity.guid
        value: MYSQL|${env:CLUSTER_NAME}|${env:MYSQL_ENDPOINT}
        action: insert
      - key: entity.name
        value: ${env:MYSQL_ENDPOINT}
        action: insert
      - key: newrelic.entity.synthesis
        value: "true"
        action: insert

  transform/core_metrics:
    error_mode: ignore
    metric_statements:
      - context: metric
        statements:
          - set(attributes["critical"], true) where name matches "mysql\\.connections\\.current|mysql\\.threads\\.running"
          - set(attributes["performance_category"], "connection_health") where name matches "mysql\\.connections\\.*"
          - set(attributes["performance_category"], "thread_management") where name matches "mysql\\.threads\\.*"

  filter/critical:
    error_mode: ignore
    metrics:
      metric:
        - 'attributes["critical"] == true'

exporters:
  otlphttp/newrelic_standard:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: gzip
    timeout: 30s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 60s
      max_elapsed_time: 300s
    sending_queue:
      enabled: true
      num_consumers: 5
      queue_size: 10000

  otlphttp/newrelic_critical:
    endpoint: ${env:NEW_RELIC_OTLP_ENDPOINT}
    headers:
      api-key: ${env:NEW_RELIC_LICENSE_KEY}
    compression: none
    timeout: 10s
    retry_on_failure:
      enabled: true
      initial_interval: 2s
      max_interval: 20s
      max_elapsed_time: 120s
    sending_queue:
      enabled: true
      num_consumers: 3
      queue_size: 5000

  debug:
    verbosity: basic

  prometheus:
    endpoint: "0.0.0.0:8081"
    namespace: core_metrics
    const_labels:
      module: core-metrics

extensions:
  health_check:
    endpoint: 0.0.0.0:13133

  pprof:
    endpoint: 0.0.0.0:1777

service:
  extensions: [health_check, pprof]
  
  pipelines:
    metrics/standard:
      receivers: [mysql]
      processors: [
        memory_limiter,
        batch/standard,
        attributes/core_metrics,
        resource/standard,
        attributes/newrelic,
        attributes/entity_synthesis,
        transform/core_metrics
      ]
      exporters: [otlphttp/newrelic_standard, prometheus, debug]

    metrics/critical:
      receivers: [mysql]
      processors: [
        memory_limiter,
        filter/critical,
        batch/critical,
        attributes/core_metrics,
        resource/standard,
        attributes/newrelic_critical,
        attributes/entity_synthesis
      ]
      exporters: [otlphttp/newrelic_critical]

  telemetry:
    logs:
      level: info